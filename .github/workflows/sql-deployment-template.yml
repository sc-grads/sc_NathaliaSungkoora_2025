name: SQL Deployment Template

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      db_server:
        required: true
        type: string
      db_user:
        required: true
        type: string
      db_pass:
        required: true
        type: string
      db_name:
        required: true
        type: string
    secrets:
      DB_SERVER:
        required: true
      DB_USER:
        required: true
      DB_PASS:
        required: true
      DB_NAME:
        required: true

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üóÉ Cache SQLCMD Tools
        id: cache-sqlcmd
        uses: actions/cache@v3
        with:
          path: /opt/mssql-tools
          key: ${{ runner.os }}-sqlcmd-${{ hashFiles('**/sql-deploy.yml') }}
          restore-keys: ${{ runner.os }}-sqlcmd-

      - name: üõ† Install SQLCMD Tools
        if: steps.cache-sqlcmd.outputs.cache-hit != 'true'
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev

      - name: üß™ Debug Secret Status
        run: |
          echo "‚úÖ DB_SERVER: ${{ secrets.DB_SERVER }}"
          echo "‚úÖ DB_USER: ${{ secrets.DB_USER }}"
          echo "‚úÖ DB_NAME: ${{ secrets.DB_NAME }}"
          [ -z "${{ secrets.DB_PASS }}" ] && echo "‚ùå DB_PASS is missing!" || echo "‚úÖ DB_PASS is set."

      - name: ‚öô Run SQL Scripts
        run: |
          run_sql() {
            local file=$1
            local db=$2
            echo "========================================"
            echo "üöÄ Executing $file on $db"
            echo "----------------------------------------"
            # Try block
            if /opt/mssql-tools/bin/sqlcmd \
              -S "${{ secrets.DB_SERVER }}" \
              -U "${{ secrets.DB_USER }}" \
              -P "${{ secrets.DB_PASS }}" \
              -d "$db" \
              -i "$file"; then
              echo "‚úÖ Successfully executed $file"
            else
              # Catch block
              echo "‚ùå Error: Failed to execute $file"
              echo "Check logs above for SQLCMD error details"
              exit 1
            fi
            echo "========================================"
          }

          # Execute initial script
          run_sql "DatabaseAdministration/SQLStatements/Database Automation Scripts/01_create_database_sp.sql" "master"

          # Execute remaining scripts with error handling
          for file in "DatabaseAdministration/SQLStatements/Database Automation Scripts/"0[2-9]_*.sql; do
            if [ -f "$file" ]; then
              run_sql "$file" "${{ secrets.DB_NAME }}"
            else
              echo "‚ö†Ô∏è No scripts found matching pattern 0[2-9]_*.sql"
            fi
          done
        shell: bash