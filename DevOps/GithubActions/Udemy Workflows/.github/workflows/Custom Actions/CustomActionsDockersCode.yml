name: Deployment  # Define the name of the GitHub Actions workflow

on:
  push:  # Trigger the workflow when code is pushed to the specified branches
    branches:
      - main  # Trigger for pushes to the 'main' branch

jobs:
  lint:  # Define the 'lint' job for checking the code quality
    runs-on: ubuntu-latest  # The job will run on the latest version of the Ubuntu runner
    steps:
      - name: Get code  # Check out the repository code
        uses: actions/checkout@v3  # Use the checkout action to get the repository's code

      - name: Load & cache dependencies  # Load dependencies and manage caching
        id: cache-deps  # Set an ID for the caching step to refer to later
        uses: ./.github/actions/cached-deps  # Use a custom action located in the repository to cache dependencies
        with:
          caching: 'false'  # Disable caching in this case (for example, to ensure a fresh install)

      - name: Output information  # Output cache usage information
        run: echo "Cache used? ${{ steps.cache-deps.outputs.used-cache }}"  # Print whether the cache was used

      - name: Lint code  # Run the linting process to check code quality
        run: npm run lint  # Run the linting command defined in package.json

  test:  # Define the 'test' job to run tests for the project
    runs-on: ubuntu-latest  # The job will run on the latest version of the Ubuntu runner
    steps:
      - name: Get code  # Check out the repository code
        uses: actions/checkout@v3  # Use the checkout action to get the repository's code

      - name: Load & cache dependencies  # Load dependencies and manage caching
        uses: ./.github/actions/cached-deps  # Use a custom action located in the repository to cache dependencies

      - name: Test code  # Run the tests for the project
        id: run-tests  # Set an ID for the test-running step
        run: npm run test  # Run the test command defined in package.json

      - name: Upload test report  # Upload the test report if tests fail
        if: failure() && steps.run-tests.outcome == 'failure'  # Only run this if the tests fail
        uses: actions/upload-artifact@v3  # Use GitHub's upload-artifact action to upload the test report
        with:
          name: test-report  # Name of the artifact (test report)
          path: test.json  # Path to the test report file (assumed to be generated by the tests)

  build:  # Define the 'build' job to build the project (after tests pass)
    needs: test  # The build job depends on the successful completion of the 'test' job
    runs-on: ubuntu-latest  # The job will run on the latest version of the Ubuntu runner
    steps:
      - name: Get code  # Check out the repository code
        uses: actions/checkout@v3  # Use the checkout action to get the repository's code

      - name: Load & cache dependencies  # Load dependencies and manage caching
        uses: ./.github/actions/cached-deps  # Use a custom action located in the repository to cache dependencies

      - name: Build website  # Build the website for deployment
        run: npm run build  # Run the build command defined in package.json

      - name: Upload artifacts  # Upload build artifacts for deployment
        uses: actions/upload-artifact@v3  # Use GitHub's upload-artifact action to upload build artifacts
        with:
          name: dist-files  # Name of the artifact (build output files)
          path: dist  # Path to the build output folder (assumed to be 'dist')

  deploy:  # Define the 'deploy' job to deploy the website
    needs: build  # The deploy job depends on the successful completion of the 'build' job
    runs-on: ubuntu-latest  # The job will run on the latest version of the Ubuntu runner
    steps:
      - name: Get code  # Check out the repository code
        uses: actions/checkout@v3  # Use the checkout action to get the repository's code

      - name: Get build artifacts  # Download build artifacts for deployment
        uses: actions/download-artifact@v3  # Use GitHub's download-artifact action to download build artifacts
        with:
          name: dist-files  # The artifact name to download (must match the 'name' in the build job)
          path: ./dist  # Path to download the build files to

      - name: Output contents  # List the contents of the downloaded build folder
        run: ls  # Run the 'ls' command to output the contents of the 'dist' folder

      - name: Deploy site  # Deploy the website to the hosting platform (e.g., AWS S3)
        id: deploy  # Set an ID for the deploy step
        uses: ./.github/actions/deploy-s3-javascript  # Use a custom action located in the repository to deploy to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key for authentication (from GitHub secrets)
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret key for authentication (from GitHub secrets)
        with:
          bucket: gha-custom-action-hosting  # Name of the S3 bucket for deployment
          dist-folder: ./dist  # Path to the folder containing the build files to upload (the 'dist' folder)

      - name: Output information  # Output the URL of the deployed site
        run: |
          echo "Live URL: ${{ steps.deploy.outputs.website-url }}"  # Print the live URL of the deployed website
